{"version":3,"sources":["Components/MainPage/Nodes/Node.module.css","Components/Header/Header.module.css","Components/Sidebar/Sidebar.module.css","Components/SideComponents/CompareAlgo/CompareAlgo.module.css","Components/Header/HeaderComponents/Picker/Picker.module.css","Components/SideComponents/Statistics/Statistics.module.css","Components/MainPage/MainPage.module.css","Components/Footer/Footer.module.css","Components/Header/HeaderComponents/DropdownMenu/DropdownMenu.module.css","Components/Header/HeaderComponents/DropdownItem/DropdownItem.module.css","Components/UI/Button/Button.module.css","reportWebVitals.js","Components/Contex/AlgorithmsContext.tsx","Components/Contex/ControlsContext.tsx","Components/Footer/Footer.tsx","Components/Header/HeaderComponents/Picker/Picker.tsx","Components/Header/HeaderComponents/DropdownMenu/DropdownMenu.tsx","Components/Header/HeaderComponents/DropdownItem/DropdownItem.tsx","Components/UI/Button/Button.tsx","assets/flags/pl.svg","assets/flags/gb.svg","Components/Header/Header.tsx","Components/MainPage/Nodes/Node.tsx","algorithms/mazes/randomDepth.ts","algorithms/pathfinding/pathfindingUtils.ts","algorithms/pathfinding/dijkstra.ts","algorithms/pathfinding/astar.ts","algorithms/pathfinding/breadth.ts","algorithms/pathfinding/best.ts","algorithms/pathfinding/depth.ts","algorithms/mazes/recursive.ts","Components/MainPage/MainPage.tsx","algorithms/mazes/random.ts","Components/SideComponents/CompareAlgo/CompareAlgo.tsx","Components/SideComponents/Statistics/Statistics.tsx","Components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AlgorithmsCont","createContext","AlgorithmsContext","props","useState","currentAlgorithm","setCurrentAlgorithm","currentMazeAlgorithm","setCurrentMazeAlgorithm","currentAnimationStyle","setCurrentAnimationStyle","mazeAnimationSpeed","setMazeAnimationSpeed","algoAnimationSpeed","setAlgoAnimationSpeed","distance","numberOfVisited","timeTaken","algoStats","setAlgoStats","compareAlgoData","setCompareAlgoData","Provider","value","children","useAlgorithm","useContext","Controlls","ControlsContext","mainPageCommand","setMainPageCommand","executeAlgo","setExecuteAlgo","useControls","Footer","className","styles","wraper","Picker","open","setOpen","currentRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","onClick","prev","name","triangleOpen","triangle","DropdownMenu","dropdown","DropdownItem","item","Math","random","Button","text","customButton","Header","t","useTranslation","mazeAnimationSpeedText","setMazeAnimationSpeedText","algoAnimationSpeedText","setAlgoAnimationSpeedText","handleAlgoritmsChosen","console","log","handleMazeChosen","mainWrapper","divider","subtitle","stopPropagation","map","clearButton","currentAlgo","alt","i18next","language","changeLanguage","src","enFlag","plFlag","english","Node","node","isInDrawingMode","setIsInDrawingMode","setDrawingType","drawingType","row","column","onMoveStartEnd","updateNodes","isInBlockedState","setPreviousNode","previousNode","id","onMouseDown","e","preventDefault","type","prevType","onMouseEnter","onMouseOver","clear","wall","visited","path","start","end","notifyVisited","nodes","newNode","findNodeBetween","nodeOne","nodeTwo","foundRow","foundColumn","randomOne","arr","floor","length","setNeighbours","nrRows","nrColumns","r","c","isMazeNode","neighbours","addNeighbours","currNode","col","maxRow","maxCol","push","markAsFound","pickRandomFirstNode","mazeNodes","find","nodeType","allNodes","findNeighbours","filter","neighbour","findNodesOrderToStart","finalNode","nodesOrder","currentNode","undefined","previous","reverse","dijkstra","algoNodes","JSON","parse","stringify","startingNode","endingNode","priorityQueue","pathOrder","endNodeDistance","startTime","performance","now","statistics","sort","a","b","shift","i","updatedNeighbour","astar","startNode","g","h","pop","abs","objIndex","findIndex","obj","breadth","best","depth","recursive","isValid","generatedWallNodes","splittedNodes1","splittedNodes2","isHorizontal","divisionRow","findEvenFromRange","divisionColumn","divide","wallNodes","passage","horizontal","findOddFromRange","findPassage","forEach","markAsWall","wallNodesWithPassage","filteredArray","Array","fill","_","idx","number","SingleNode","this","Infinity","populateNodes","currentRow","clearWalls","clearPaths","MainPage","setIsInBlockedState","executePathFinding","data","mazeAlgorithmName","isValidMazeAlgorithm","generateMaze","getElementById","moveStartEnd","prevRow","prevCol","prevNode","newUpdatedNode","prevUpdatedNode","animatePath","stack","time","indx","nodeStyles","setTimeout","newNodeee","algoStack","newStarterParams","unvisited","nextNode","wallNode","newParams","randomDepth","flat","helpingStack","wallsAround","getStackForCurrentAlgorithm","classicMazeAnimation","eduMazeAnimation","currentAlgoNodes","animateAlgo","allWalls","prepareTheBoard","animateGrid","arrNode","getWallNodesFromStack","stackNodeType","currentNodeType","onMouseUp","onMouseLeave","nodesWraper","rowIdx","rowWraper","nodeidx","pathfindingAlgosList","round","num","m","Number","toPrecision","sign","CompareAlgo","isCompareOpen","algosToCompare","setAlgosToCompare","handleAddAlgo","compareAlgoWrapper","compareAlgoWrapperOpened","list","style","width","color","handleShowAlgo","buttons","algorithm","isAlgorithmAvailable","index","Statistics","statisticsDialog","isStatOpen","statisticsDialogOpened","statWrapper","Sidebar","setIsStatOpen","setIsCompareOpen","stats","sidePanel","triangleOpened","compare","App","i18n","use","initReactI18next","init","resources","en","translation","pl","lng","fallbackLng","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6852fa25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clear\":\"Node_clear__3D6we\",\"grow4\":\"Node_grow4__2XGuJ\",\"wall\":\"Node_wall__386qo\",\"grow\":\"Node_grow__3ichH\",\"visited\":\"Node_visited__jLJQV\",\"path\":\"Node_path__Vb-l0\",\"start\":\"Node_start__1Wnkb\",\"grow2\":\"Node_grow2__1VBrI\",\"end\":\"Node_end__2lswt\",\"grow3\":\"Node_grow3__gRl7t\",\"pathAnim\":\"Node_pathAnim__qhJlc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrapper\":\"Header_mainWrapper__VLRGP\",\"english\":\"Header_english__1y8FL\",\"wraper\":\"Header_wraper__Iaz4-\",\"divider\":\"Header_divider__2AklV\",\"subtitle\":\"Header_subtitle__37hWW\",\"currentAlgo\":\"Header_currentAlgo__3AZBA\",\"clearButton\":\"Header_clearButton__1t3ZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidePanel\":\"Sidebar_sidePanel__W1hDh\",\"stats\":\"Sidebar_stats__YGLxz\",\"compare\":\"Sidebar_compare__1nMxn\",\"triangle\":\"Sidebar_triangle__2LgU6\",\"triangleOpened\":\"Sidebar_triangleOpened__2u1yk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"compareAlgoWrapper\":\"CompareAlgo_compareAlgoWrapper__3nqUK\",\"list\":\"CompareAlgo_list__2dSXl\",\"compareAlgoWrapperOpened\":\"CompareAlgo_compareAlgoWrapperOpened__ev5I9\",\"row\":\"CompareAlgo_row__1e0gB\",\"algosWrapper\":\"CompareAlgo_algosWrapper__374PF\",\"buttons\":\"CompareAlgo_buttons__3g_bU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"triangle\":\"Picker_triangle__Aix06\",\"triangleOpen\":\"Picker_triangleOpen__3klJv\",\"wraper\":\"Picker_wraper__Ji5Mk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsDialog\":\"Statistics_statisticsDialog__2dfIr\",\"statisticsDialogOpened\":\"Statistics_statisticsDialogOpened__3B5Bu\",\"statWrapper\":\"Statistics_statWrapper__3xFYt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nodesWraper\":\"MainPage_nodesWraper__3i1t2\",\"rowWraper\":\"MainPage_rowWraper__3hHlS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wraper\":\"Footer_wraper__2Y5eE\",\"divider\":\"Footer_divider__3HOtv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"DropdownMenu_dropdown__vSex-\",\"dropdown-unmounted\":\"DropdownMenu_dropdown-unmounted__2V5c6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DropdownItem_item__33CyR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"customButton\":\"Button_customButton__1lwLY\",\"grow\":\"Button_grow__mnTFT\"};","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createContext, useContext, useState } from \"react\";\r\n\r\nexport const AlgorithmsCont = createContext({} as any);\r\n\r\nexport const AlgorithmsContext: React.FC<any> = (props) => {\r\n  const [currentAlgorithm, setCurrentAlgorithm] = useState(\"\");\r\n  const [currentMazeAlgorithm, setCurrentMazeAlgorithm] = useState(\"\");\r\n  const [currentAnimationStyle, setCurrentAnimationStyle] = useState(\"Classic\");\r\n  const [mazeAnimationSpeed, setMazeAnimationSpeed] = useState(5);\r\n  const [algoAnimationSpeed, setAlgoAnimationSpeed] = useState(2);\r\n  const [algoStats, setAlgoStats] = useState({ distance: 0, numberOfVisited: 0, timeTaken: 0 });\r\n  const [compareAlgoData, setCompareAlgoData] = useState();\r\n  return (\r\n    <AlgorithmsCont.Provider\r\n      value={{\r\n        currentAlgorithm,\r\n        setCurrentAlgorithm,\r\n        currentMazeAlgorithm,\r\n        setCurrentMazeAlgorithm,\r\n        currentAnimationStyle,\r\n        setCurrentAnimationStyle,\r\n        mazeAnimationSpeed,\r\n        setMazeAnimationSpeed,\r\n        algoAnimationSpeed,\r\n        setAlgoAnimationSpeed,\r\n        setAlgoStats,\r\n        algoStats,\r\n        compareAlgoData,\r\n        setCompareAlgoData,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AlgorithmsCont.Provider>\r\n  );\r\n};\r\nexport function useAlgorithm() {\r\n  return useContext(AlgorithmsCont);\r\n}\r\n","import { createContext, useContext, useState } from \"react\";\r\n\r\nexport const Controlls = createContext({} as any);\r\n\r\nexport const ControlsContext: React.FC<any> = (props) => {\r\n  const [mainPageCommand, setMainPageCommand] = useState(\"none\");\r\n  const [executeAlgo, setExecuteAlgo] = useState(false);\r\n  return (\r\n    <Controlls.Provider\r\n      value={{\r\n        mainPageCommand,\r\n        setMainPageCommand,\r\n        executeAlgo,\r\n        setExecuteAlgo,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Controlls.Provider>\r\n  );\r\n};\r\n\r\nexport function useControls() {\r\n  return useContext(Controlls);\r\n}\r\n","import styles from \"./Footer.module.css\";\r\nconst Footer = () => {\r\n  return <div className={styles.wraper}></div>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"./Picker.module.css\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  children: any;\r\n}\r\nconst Picker: React.FC<Props> = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const currentRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    function handleClickOutside(event: any) {\r\n      if (currentRef.current && !currentRef.current.contains(event.target)) {\r\n        setOpen(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [currentRef]);\r\n  return (\r\n    <div ref={currentRef} onClick={() => setOpen((prev) => !prev)}>\r\n      <div className={styles.wraper}>\r\n        <p>{props.name}</p>\r\n        <div className={open ? styles.triangleOpen : styles.triangle}></div>\r\n      </div>\r\n      {open && props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Picker;\r\n","import styles from \"./DropdownMenu.module.css\";\r\n\r\ninterface Props {\r\n  children: any;\r\n}\r\nconst DropdownMenu: React.FC<Props> = (props) => {\r\n  return <ul className={styles.dropdown}>{props.children}</ul>;\r\n};\r\n\r\nexport default DropdownMenu;\r\n","import styles from \"./DropdownItem.module.css\";\r\n\r\ninterface Props {\r\n  onClick: (name: string) => void;\r\n  name: string;\r\n}\r\nconst DropdownItem: React.FC<Props> = (props) => {\r\n  const handleItemChosen = () => {\r\n    props.onClick(props.name);\r\n  };\r\n\r\n  return (\r\n    <li key={Math.random()} onClick={handleItemChosen} className={styles.item}>\r\n      {props.name}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default DropdownItem;\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  onClick: (event: any) => void;\r\n}\r\nconst Button: React.FC<Props> = ({ text, onClick }) => {\r\n  const handleOnClick = (event: any) => {\r\n    onClick(event);\r\n  };\r\n\r\n  return (\r\n    <button className={styles.customButton} onClick={handleOnClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/pl.3038582e.svg\";","export default __webpack_public_path__ + \"static/media/gb.3b671736.svg\";","import Picker from \"./HeaderComponents/Picker/Picker\";\r\nimport styles from \"./Header.module.css\";\r\nimport DropdownMenu from \"./HeaderComponents/DropdownMenu/DropdownMenu\";\r\nimport DropdownItem from \"./HeaderComponents/DropdownItem/DropdownItem\";\r\nimport { useAlgorithm } from \"../Contex/AlgorithmsContext\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport { useState } from \"react\";\r\nimport { useControls } from \"../Contex/ControlsContext\";\r\nimport plFlag from \"../../assets/flags/pl.svg\";\r\nimport enFlag from \"../../assets/flags/gb.svg\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\n\r\nconst Header = () => {\r\n  const { t } = useTranslation();\r\n  const {\r\n    setCurrentAlgorithm,\r\n    setCurrentMazeAlgorithm,\r\n    currentAnimationStyle,\r\n    setCurrentAnimationStyle,\r\n    setMazeAnimationSpeed,\r\n    currentAlgorithm,\r\n    setAlgoAnimationSpeed,\r\n  } = useAlgorithm();\r\n  const { setMainPageCommand } = useControls();\r\n  const [mazeAnimationSpeedText, setMazeAnimationSpeedText] = useState(\"Normal\");\r\n  const [algoAnimationSpeedText, setAlgoAnimationSpeedText] = useState(\"Fast\");\r\n\r\n  const pathfindingAlgosList = [\r\n    \"A* search\",\r\n    \"Dijkstra's algorithm\",\r\n    \"Depth first search\",\r\n    \"Breadth first search\",\r\n    \"Best first search\",\r\n  ];\r\n  const handleAlgoritmsChosen = (name: string) => {\r\n    setCurrentAlgorithm(name);\r\n    console.log(`Current algorithm set to: ${name}`);\r\n  };\r\n\r\n  const handleMazeChosen = (name: string) => {\r\n    setCurrentMazeAlgorithm(name);\r\n  };\r\n\r\n  const handleOnAnimationChange = (event: any) => {\r\n    currentAnimationStyle === \"Classic\" ? setCurrentAnimationStyle(\"Educational\") : setCurrentAnimationStyle(\"Classic\");\r\n    event.stopPropagation();\r\n  };\r\n\r\n  const handleChangeOfMazeAnimationSpeed = (event: any) => {\r\n    if (mazeAnimationSpeedText === \"Normal\") {\r\n      setMazeAnimationSpeed(4);\r\n      setMazeAnimationSpeedText(\"Fast\");\r\n    } else if (mazeAnimationSpeedText === \"Fast\") {\r\n      setMazeAnimationSpeed(20);\r\n      setMazeAnimationSpeedText(\"Slow\");\r\n    } else if (mazeAnimationSpeedText === \"Slow\") {\r\n      setMazeAnimationSpeed(10);\r\n      setMazeAnimationSpeedText(\"Normal\");\r\n    }\r\n    event.stopPropagation();\r\n  };\r\n\r\n  const handleChangeOfAlgoAnimationSpeed = (event: any) => {\r\n    if (algoAnimationSpeedText === \"Normal\") {\r\n      setAlgoAnimationSpeed(2);\r\n      setAlgoAnimationSpeedText(\"Fast\");\r\n    } else if (algoAnimationSpeedText === \"Fast\") {\r\n      setAlgoAnimationSpeed(20);\r\n      setAlgoAnimationSpeedText(\"Slow\");\r\n    } else if (algoAnimationSpeedText === \"Slow\") {\r\n      setAlgoAnimationSpeed(8);\r\n      setAlgoAnimationSpeedText(\"Normal\");\r\n    }\r\n    event.stopPropagation();\r\n  };\r\n\r\n  const handleLanguageChange = () => {\r\n    i18next.language === \"en\" ? i18next.changeLanguage(\"pl\") : i18next.changeLanguage(\"en\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.mainWrapper}>\r\n      <div className={styles.wraper}>\r\n        <h2>{t(\"title\")}</h2>\r\n        <h2 className={styles.divider}>/</h2>\r\n        <Picker name={t(\"header_algorithms_menu\")}>\r\n          <DropdownMenu>\r\n            <p className={styles.subtitle}>{t(\"header_animation_speed\")}</p>\r\n            <Button text={algoAnimationSpeedText} onClick={handleChangeOfAlgoAnimationSpeed} />\r\n            <hr />\r\n            {pathfindingAlgosList.map((item) => {\r\n              return <DropdownItem key={item} onClick={handleAlgoritmsChosen} name={item} />;\r\n            })}\r\n          </DropdownMenu>\r\n        </Picker>\r\n        <h3>/</h3>\r\n        <Picker name={t(\"header_generate_maze\")}>\r\n          <DropdownMenu>\r\n            <p className={styles.subtitle}>{t(\"header_animation_style\")}</p>\r\n            <Button text={currentAnimationStyle} onClick={handleOnAnimationChange} />\r\n            <p className={styles.subtitle}>{t(\"header_animation_speed\")}</p>\r\n            <Button text={mazeAnimationSpeedText} onClick={handleChangeOfMazeAnimationSpeed} />\r\n            <hr />\r\n            <DropdownItem onClick={handleMazeChosen} name={\"Random maze\"} />\r\n\r\n            <DropdownItem onClick={handleMazeChosen} name={\"Recursive backtracking\"} />\r\n            <DropdownItem onClick={handleMazeChosen} name={\"Recursive division\"} />\r\n          </DropdownMenu>\r\n        </Picker>\r\n        <h2 className={styles.divider}>/</h2>\r\n        <p className={styles.clearButton} onClick={() => setMainPageCommand(\"clear\")}>\r\n          {t(\"header_clear_walls\")}\r\n        </p>\r\n        <h3>/</h3>\r\n        <p className={styles.clearButton} onClick={() => setMainPageCommand(\"reset\")}>\r\n          {t(\"header_reset_board\")}\r\n        </p>\r\n        <h2 className={styles.divider}>/</h2>\r\n        <p className={styles.currentAlgo}>\r\n          {t(\"header_current_algo\")}: {currentAlgorithm}\r\n        </p>\r\n      </div>\r\n      <img\r\n        alt=\"language\"\r\n        onClick={handleLanguageChange}\r\n        src={i18next.language === \"en\" ? enFlag : plFlag}\r\n        className={styles.english}\r\n      ></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { SingleNode } from \"../MainPage\";\r\nimport styles from \"./Node.module.css\";\r\n\r\ninterface Props {\r\n  node: SingleNode;\r\n  isInDrawingMode: boolean;\r\n  setIsInDrawingMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setDrawingType: React.Dispatch<React.SetStateAction<string>>;\r\n  drawingType: string;\r\n  row: number;\r\n  column: number;\r\n  onMoveStartEnd: (row: number, col: number, prevRow: number, prevCol: number, type: string) => void;\r\n  updateNodes: (col: number, row: number, type: string, prevType?: string) => void;\r\n  isInBlockedState: boolean;\r\n  setPreviousNode: React.Dispatch<\r\n    React.SetStateAction<{\r\n      row: number;\r\n      column: number;\r\n    }>\r\n  >;\r\n  previousNode: {\r\n    row: number;\r\n    column: number;\r\n  };\r\n}\r\nconst Node: React.FC<Props> = ({\r\n  node,\r\n  isInDrawingMode,\r\n  setIsInDrawingMode,\r\n  setDrawingType,\r\n  drawingType,\r\n  row,\r\n  column,\r\n  onMoveStartEnd,\r\n  updateNodes,\r\n  isInBlockedState,\r\n  setPreviousNode,\r\n  previousNode,\r\n}) => {\r\n  const handleOnEnter = () => {\r\n    if (!isInDrawingMode) {\r\n      return;\r\n    }\r\n\r\n    if (drawingType === \"wall\") {\r\n      if (node.type === \"clear\" || node.type === \"visited\" || node.type === \"path\") {\r\n        updateNodes(column, row, \"wall\", node.type);\r\n      }\r\n    }\r\n\r\n    if (drawingType === \"clear\") {\r\n      if (node.type === \"wall\") {\r\n        node.prevType === \"wall\"\r\n          ? updateNodes(column, row, \"clear\", \"wall\")\r\n          : updateNodes(column, row, node.prevType, \"wall\");\r\n      }\r\n    }\r\n\r\n    if (drawingType === \"start\") {\r\n      onMoveStartEnd(row, column, previousNode.row, previousNode.column, \"start\");\r\n    }\r\n\r\n    if (drawingType === \"end\") {\r\n      onMoveStartEnd(row, column, previousNode.row, previousNode.column, \"end\");\r\n    }\r\n  };\r\n\r\n  const handleStartDrawing = (event: any) => {\r\n    event.preventDefault();\r\n    setIsInDrawingMode(true);\r\n\r\n    if (node.type === \"clear\" || node.type === \"visited\" || node.type === \"path\") {\r\n      setDrawingType(\"wall\");\r\n      updateNodes(column, row, \"wall\", node.type);\r\n    }\r\n\r\n    if (node.type === \"wall\") {\r\n      setDrawingType(\"clear\");\r\n      node.prevType === \"wall\"\r\n        ? updateNodes(column, row, \"clear\", \"wall\")\r\n        : updateNodes(column, row, node.prevType, \"wall\");\r\n    }\r\n\r\n    if (node.type === \"start\") {\r\n      setDrawingType(\"start\");\r\n    }\r\n\r\n    if (node.type === \"end\") {\r\n      setDrawingType(\"end\");\r\n    }\r\n  };\r\n  const handleOnLeave = () => {\r\n    setPreviousNode({ row: row, column: column });\r\n  };\r\n  return (\r\n    <div\r\n      id={`node-${row}-${column}`}\r\n      onMouseDown={(e) => {\r\n        if (!isInBlockedState) handleStartDrawing(e);\r\n      }}\r\n      onMouseEnter={handleOnEnter}\r\n      onMouseOver={handleOnLeave}\r\n      className={`${node.type === \"clear\" ? styles.clear : \"\"} ${node.type === \"wall\" ? styles.wall : \"\"}  ${\r\n        node.type === \"visited\" ? styles.visited : \"\"\r\n      } ${node.type === \"path\" ? styles.path : \"\"} ${node.type === \"start\" ? styles.start : \"\"}${\r\n        node.type === \"end\" ? styles.end : \"\"\r\n      } `}\r\n    >\r\n      {/* {node.id} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","interface Node {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: Node[];\r\n  distance: number;\r\n}\r\n\r\nexport interface WrapperNode {\r\n  node: Node;\r\n  type: string;\r\n}\r\n\r\nexport function randomDepth(nodes: Node[][]) {\r\n  const newNodeee = JSON.parse(JSON.stringify(nodes));\r\n  let algoNodes: Node[][] = setNeighbours(newNodeee);\r\n  const startingNode = pickRandomFirstNode(algoNodes);\r\n  const nodesOrder: WrapperNode[] = [];\r\n  const algoStack: Node[] = [];\r\n\r\n  markAsFound(startingNode);\r\n  const newStarterParams = notifyVisited(startingNode, algoNodes);\r\n  algoNodes = newStarterParams.nodes;\r\n  nodesOrder.push(markAsFound(newStarterParams.newNode));\r\n  algoStack.push(newStarterParams.newNode);\r\n\r\n  while (algoStack.length > 0) {\r\n    let currentNode: Node | undefined = algoStack.pop();\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n    const unvisited = [];\r\n    for (let i = 0; i < currentNode.neighbours.length; i++) {\r\n      if (algoNodes[currentNode.neighbours[i].row][currentNode.neighbours[i].column].type !== \"visited\") {\r\n        unvisited.push(currentNode.neighbours[i]);\r\n      }\r\n    }\r\n\r\n    if (unvisited.length > 0) {\r\n      const neighbour = randomOne(unvisited);\r\n      algoStack.push(currentNode);\r\n      const nextNode: Node = algoNodes[neighbour.row][neighbour.column];\r\n      const wallNode = findNodeBetween(currentNode, nextNode, algoNodes);\r\n      nodesOrder.push(markAsFound(wallNode));\r\n      nodesOrder.push(markAsFound(nextNode));\r\n      const newParams = notifyVisited(nextNode, algoNodes);\r\n      algoNodes = newParams.nodes;\r\n      algoStack.push(newParams.newNode);\r\n      // } else {\r\n      //   //In future to be controlled by variable if visited nodes want to be seen by user\r\n      //     nodesOrder.push(markAsVisited(currentNode));\r\n      //     if (algoStack.length !== 0) {\r\n      //       const previousNode: Node | undefined = algoStack.pop();\r\n      //       if(previousNode === undefined){\r\n      //         break;\r\n      //       }\r\n      //       const wallNode = findNodeBetween(previousNode, currentNode, algoNodes);\r\n      //       nodesOrder.push(markAsVisited(wallNode));\r\n      //       algoStack.push(previousNode);\r\n      //     }\r\n    }\r\n  }\r\n\r\n  return nodesOrder;\r\n}\r\n\r\nconst notifyVisited = (node: Node, nodes: Node[][]) => {\r\n  let newNode: Node = { ...node, type: \"visited\" };\r\n  nodes[node.row][node.column] = newNode;\r\n  return { nodes, newNode };\r\n};\r\nconst findNodeBetween = (nodeOne: Node, nodeTwo: Node, nodes: Node[][]) => {\r\n  let foundRow: number = 0;\r\n  let foundColumn: number = 0;\r\n  if (nodeOne.row < nodeTwo.row) {\r\n    foundRow = nodeOne.row + 1;\r\n    foundColumn = nodeOne.column;\r\n  } else if (nodeOne.row > nodeTwo.row) {\r\n    foundRow = nodeOne.row - 1;\r\n    foundColumn = nodeOne.column;\r\n  } else if (nodeOne.column < nodeTwo.column) {\r\n    foundRow = nodeOne.row;\r\n    foundColumn = nodeOne.column + 1;\r\n  } else {\r\n    foundRow = nodeOne.row;\r\n    foundColumn = nodeOne.column - 1;\r\n  }\r\n\r\n  const foundNode: Node = nodes[foundRow][foundColumn];\r\n  return foundNode;\r\n};\r\n\r\nconst randomOne = (arr: any[]) => {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n};\r\n\r\nconst setNeighbours = (nodes: Node[][]) => {\r\n  const nrRows: number = nodes.length;\r\n  const nrColumns: number = nodes[0].length;\r\n  for (let r = 0; r < nrRows; r++) {\r\n    for (let c = 0; c < nrColumns; c++) {\r\n      if (isMazeNode(r, c)) {\r\n        const neighbours = addNeighbours(nodes, r, c, nrRows, nrColumns);\r\n        const currNode = nodes[r][c];\r\n        const newNode = { ...currNode, neighbours: neighbours };\r\n        nodes[r][c] = newNode;\r\n      }\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n\r\nconst addNeighbours = (nodes: Node[][], row: number, col: number, maxRow: number, maxCol: number) => {\r\n  const neighbours: Node[] | undefined = [];\r\n  if (row - 2 > 0) neighbours.push(nodes[row - 2][col]);\r\n  if (row + 2 < maxRow - 1) neighbours.push(nodes[row + 2][col]);\r\n  if (col - 2 > 0) neighbours.push(nodes[row][col - 2]);\r\n  if (col + 2 < maxCol - 1) neighbours.push(nodes[row][col + 2]);\r\n\r\n  return neighbours;\r\n};\r\n\r\nconst markAsFound = (node: Node) => {\r\n  return { node: node, type: \"clear\" };\r\n};\r\n\r\n// const markAsVisited = (node: Node) => {\r\n//   return { node: node, type: \"visited\" };\r\n// };\r\n\r\nconst pickRandomFirstNode = (nodes: Node[][]) => {\r\n  const mazeNodes: Node[] = [];\r\n\r\n  for (let row = 0; row < nodes.length; row++) {\r\n    for (let column = 0; column < nodes[0].length; column++) {\r\n      if (isMazeNode(row, column)) mazeNodes.push(nodes[row][column]);\r\n    }\r\n  }\r\n\r\n  return randomOne(mazeNodes);\r\n};\r\n\r\nconst isMazeNode = (row: number, col: number) => {\r\n  return row % 2 === 1 && col % 2 === 1;\r\n};\r\n","export interface Node {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: Node[];\r\n  distance: number;\r\n  g?: number;\r\n  h?: number;\r\n  previous?: Node;\r\n}\r\n\r\nexport const find = (nodeType: string, allNodes: Node[][]) => {\r\n  for (let row = 0; row < allNodes.length; row++) {\r\n    for (let column = 0; column < allNodes[0].length; column++) {\r\n      if (allNodes[row][column].type === nodeType) {\r\n        return allNodes[row][column];\r\n      }\r\n    }\r\n  }\r\n  // console.log(`Couldn't find the ${nodeType.toUpper()} node`);\r\n};\r\n\r\nexport const findNeighbours = (node: Node, allNodes: Node[][]) => {\r\n  const neighbours: Node[] = [];\r\n  if (node.row + 1 < allNodes.length) {\r\n    neighbours.push(allNodes[node.row + 1][node.column]);\r\n  }\r\n  if (node.column + 1 < allNodes[0].length) {\r\n    neighbours.push(allNodes[node.row][node.column + 1]);\r\n  }\r\n  if (node.row - 1 >= 0) {\r\n    neighbours.push(allNodes[node.row - 1][node.column]);\r\n  }\r\n  if (node.column - 1 >= 0) {\r\n    neighbours.push(allNodes[node.row][node.column - 1]);\r\n  }\r\n\r\n  return neighbours.filter(\r\n    (neighbour) => neighbour.type !== \"wall\" && neighbour.type !== \"visited\" && neighbour.type !== \"start\"\r\n  );\r\n};\r\n\r\nexport const findNodesOrderToStart = (finalNode: Node) => {\r\n  const nodesOrder: Node[] = [];\r\n  let currentNode: Node = finalNode;\r\n  while (currentNode.type !== \"start\") {\r\n    if (currentNode.previous === undefined) {\r\n      break;\r\n    }\r\n    nodesOrder.push(currentNode);\r\n    currentNode = currentNode.previous;\r\n  }\r\n  if (nodesOrder.length === 0) {\r\n    return undefined;\r\n  } else return nodesOrder.reverse();\r\n};\r\n","import { Node, find, findNeighbours, findNodesOrderToStart } from \"./pathfindingUtils\";\r\n\r\nexport function dijkstra(nodes: Node[][]) {\r\n  const algoNodes: Node[][] = JSON.parse(JSON.stringify(nodes));\r\n  const startingNode: Node | undefined = find(\"start\", algoNodes);\r\n  const endingNode: Node | undefined = find(\"end\", algoNodes);\r\n  const priorityQueue: Node[] = [];\r\n  const nodesOrder: Node[] = [];\r\n  let pathOrder: Node[] | undefined = [];\r\n  let endNodeDistance: number = 0;\r\n  const startTime: number = performance.now();\r\n\r\n  if (!startingNode || !endingNode) {\r\n    return {\r\n      nodesOrder: undefined,\r\n      pathOrder: undefined,\r\n      statistics: {\r\n        distance: 0,\r\n        numberOfVisited: 0,\r\n        timeTaken: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  algoNodes[startingNode.row][startingNode.column] = {\r\n    ...startingNode,\r\n    distance: 0,\r\n  };\r\n\r\n  priorityQueue.push(startingNode);\r\n\r\n  while (priorityQueue.length > 0) {\r\n    if (priorityQueue.length > 1) {\r\n      priorityQueue.sort((a, b) => {\r\n        return a.distance - b.distance;\r\n      });\r\n    }\r\n    const currentNode: Node | undefined = priorityQueue.shift();\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n    if (currentNode.type === \"end\" && currentNode.previous) {\r\n      pathOrder = findNodesOrderToStart(currentNode.previous);\r\n      if (pathOrder !== undefined) {\r\n        endNodeDistance = pathOrder.length;\r\n      }\r\n      break;\r\n    }\r\n\r\n    const neighbours: Node[] = findNeighbours(currentNode, algoNodes);\r\n    if (neighbours.length !== 0) {\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        const distance: number = currentNode.distance + 1;\r\n        if (\r\n          distance < algoNodes[neighbours[i].row][neighbours[i].column].distance ||\r\n          algoNodes[neighbours[i].row][neighbours[i].column].distance === null\r\n        ) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            distance: currentNode.distance + 1,\r\n            previous: currentNode,\r\n          };\r\n          if (algoNodes[neighbours[i].row][neighbours[i].column].distance === null) {\r\n            priorityQueue.push(updatedNeighbour);\r\n          }\r\n\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        }\r\n      }\r\n    }\r\n    if (currentNode.type !== \"start\") {\r\n      nodesOrder.push(currentNode);\r\n      algoNodes[currentNode.row][currentNode.column] = {\r\n        ...currentNode,\r\n        type: \"visited\",\r\n      };\r\n    }\r\n  }\r\n  const endTime: number = performance.now();\r\n  const timeTaken: number = endTime - startTime;\r\n  return {\r\n    nodesOrder,\r\n    pathOrder,\r\n    statistics: {\r\n      distance: endNodeDistance,\r\n      numberOfVisited: nodesOrder.length,\r\n      timeTaken: timeTaken,\r\n    },\r\n  };\r\n}\r\n","import { find, findNeighbours, findNodesOrderToStart } from \"./pathfindingUtils\";\r\n\r\nexport interface Node {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: Node[];\r\n  distance: number;\r\n  g?: number;\r\n  h?: number;\r\n  previous?: Node;\r\n}\r\n\r\nexport function astar(nodes: Node[][]) {\r\n  const algoNodes: Node[][] = JSON.parse(JSON.stringify(nodes));\r\n  const startNode: Node | undefined = find(\"start\", algoNodes);\r\n  const endingNode: Node | undefined = find(\"end\", algoNodes);\r\n  const priorityQueue: Node[] = [];\r\n  const nodesOrder: Node[] = [];\r\n  let pathOrder: Node[] | undefined = [];\r\n  let endNodeDistance = 0;\r\n  const startTime: number = performance.now();\r\n\r\n  //No start or end node\r\n  if (startNode === undefined || endingNode === undefined) {\r\n    return {\r\n      nodesOrder: undefined,\r\n      pathOrder: undefined,\r\n      statistics: {\r\n        distance: 0,\r\n        numberOfVisited: 0,\r\n        timeTaken: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  algoNodes[startNode.row][startNode.column] = {\r\n    ...startNode,\r\n    distance: 0,\r\n    g: 0,\r\n    h: 0,\r\n  };\r\n\r\n  const startingNode: Node = algoNodes[startNode.row][startNode.column];\r\n  priorityQueue.push(startingNode);\r\n\r\n  while (priorityQueue.length > 0) {\r\n    if (priorityQueue.length > 1)\r\n      priorityQueue.sort((a, b) => {\r\n        return b.distance - a.distance;\r\n      });\r\n    const currentNode: Node | undefined = priorityQueue.pop();\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n\r\n    if (currentNode.type === \"end\" && currentNode.previous) {\r\n      pathOrder = findNodesOrderToStart(currentNode.previous);\r\n      if (pathOrder !== undefined) {\r\n        endNodeDistance = pathOrder.length;\r\n      }\r\n      break;\r\n    }\r\n\r\n    const neighbours: Node[] = findNeighbours(currentNode, algoNodes);\r\n\r\n    if (neighbours.length !== 0 && currentNode.g !== undefined) {\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        const g: number = currentNode.g + 1;\r\n        const h: number =\r\n          Math.abs(neighbours[i].row - endingNode.row) + Math.abs(neighbours[i].column - endingNode.column);\r\n        const distance: number = g + h;\r\n        if (distance < algoNodes[neighbours[i].row][neighbours[i].column].distance) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            g: g,\r\n            h: h,\r\n            distance: distance,\r\n            previous: currentNode,\r\n          };\r\n          const objIndex: number = priorityQueue.findIndex((obj) => obj.id === updatedNeighbour.id);\r\n          priorityQueue[objIndex] = updatedNeighbour;\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        } else if (algoNodes[neighbours[i].row][neighbours[i].column].distance === null) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            g: g,\r\n            h: h,\r\n            distance: distance,\r\n            previous: currentNode,\r\n          };\r\n          priorityQueue.push(updatedNeighbour);\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentNode.type !== \"start\") {\r\n      nodesOrder.push(currentNode);\r\n      algoNodes[currentNode.row][currentNode.column] = {\r\n        ...currentNode,\r\n        type: \"visited\",\r\n      };\r\n    }\r\n  }\r\n  const endTime: number = performance.now();\r\n  const timeTaken: number = endTime - startTime;\r\n  return {\r\n    nodesOrder,\r\n    pathOrder,\r\n    statistics: {\r\n      distance: endNodeDistance,\r\n      numberOfVisited: nodesOrder.length,\r\n      timeTaken: timeTaken,\r\n    },\r\n  };\r\n}\r\n","import { Node, find, findNeighbours, findNodesOrderToStart } from \"./pathfindingUtils\";\r\n\r\nexport function breadth(nodes: Node[][]) {\r\n  const algoNodes: Node[][] = JSON.parse(JSON.stringify(nodes));\r\n  const startingNode: Node | undefined = find(\"start\", algoNodes);\r\n  const endingNode: Node | undefined = find(\"end\", algoNodes);\r\n  const priorityQueue: Node[] = [];\r\n  const nodesOrder: Node[] = [];\r\n  let pathOrder: Node[] | undefined = [];\r\n  let endNodeDistance: number = 0;\r\n\r\n  if (startingNode === undefined || endingNode === undefined) {\r\n    return {\r\n      nodesOrder: undefined,\r\n      pathOrder: undefined,\r\n      statistics: {\r\n        distance: 0,\r\n        numberOfVisited: 0,\r\n        timeTaken: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  const startTime: number = performance.now();\r\n\r\n  algoNodes[startingNode.row][startingNode.column] = {\r\n    ...startingNode,\r\n    distance: 0,\r\n  };\r\n\r\n  priorityQueue.push(startingNode);\r\n\r\n  while (priorityQueue.length > 0) {\r\n    const currentNode: Node | undefined = priorityQueue.shift();\r\n\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n\r\n    if (currentNode.type === \"end\" && currentNode.previous) {\r\n      pathOrder = findNodesOrderToStart(currentNode.previous);\r\n      if (pathOrder !== undefined) {\r\n        endNodeDistance = pathOrder.length;\r\n      }\r\n      break;\r\n    }\r\n\r\n    const neighbours: Node[] = findNeighbours(currentNode, algoNodes);\r\n    if (neighbours.length !== 0) {\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        if (algoNodes[neighbours[i].row][neighbours[i].column].distance === null) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            distance: currentNode.distance + 1,\r\n            previous: currentNode,\r\n          };\r\n\r\n          priorityQueue.push(updatedNeighbour);\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        }\r\n      }\r\n    }\r\n    if (currentNode.type !== \"start\") {\r\n      nodesOrder.push(currentNode);\r\n      algoNodes[currentNode.row][currentNode.column] = {\r\n        ...currentNode,\r\n        type: \"visited\",\r\n      };\r\n    }\r\n  }\r\n  const endTime: number = performance.now();\r\n  const timeTaken: number = endTime - startTime;\r\n  return {\r\n    nodesOrder,\r\n    pathOrder,\r\n    statistics: {\r\n      distance: endNodeDistance,\r\n      numberOfVisited: nodesOrder.length,\r\n      timeTaken: timeTaken,\r\n    },\r\n  };\r\n}\r\n","import { Node, find, findNeighbours, findNodesOrderToStart } from \"./pathfindingUtils\";\r\n\r\nexport function best(nodes: Node[][]) {\r\n  const algoNodes: Node[][] = JSON.parse(JSON.stringify(nodes));\r\n  let startingNode: Node | undefined = find(\"start\", algoNodes);\r\n  const endingNode: Node | undefined = find(\"end\", algoNodes);\r\n  const priorityQueue: Node[] = [];\r\n  const nodesOrder: Node[] = [];\r\n  let pathOrder: Node[] | undefined = [];\r\n  let endNodeDistance: number = 0;\r\n\r\n  if (!startingNode || !endingNode) {\r\n    return {\r\n      nodesOrder: undefined,\r\n      pathOrder: undefined,\r\n      statistics: {\r\n        distance: 0,\r\n        numberOfVisited: 0,\r\n        timeTaken: 0,\r\n      },\r\n    };\r\n  }\r\n  const startTime: number = performance.now();\r\n\r\n  algoNodes[startingNode.row][startingNode.column] = {\r\n    ...startingNode,\r\n    distance: 0,\r\n    g: 0,\r\n    h: 0,\r\n  };\r\n\r\n  startingNode = algoNodes[startingNode.row][startingNode.column];\r\n  priorityQueue.push(startingNode);\r\n\r\n  while (priorityQueue.length > 0) {\r\n    if (priorityQueue.length > 1)\r\n      priorityQueue.sort((a, b) => {\r\n        return b.distance - a.distance;\r\n      });\r\n    const currentNode: Node | undefined = priorityQueue.pop();\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n\r\n    if (currentNode.type === \"end\" && currentNode.previous) {\r\n      pathOrder = findNodesOrderToStart(currentNode.previous);\r\n      if (pathOrder !== undefined) {\r\n        endNodeDistance = pathOrder.length;\r\n      }\r\n      break;\r\n    }\r\n\r\n    const neighbours: Node[] = findNeighbours(currentNode, algoNodes);\r\n    if (neighbours.length !== 0) {\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        const distance: number =\r\n          Math.abs(neighbours[i].row - endingNode.row) + Math.abs(neighbours[i].column - endingNode.column);\r\n        if (distance < algoNodes[neighbours[i].row][neighbours[i].column].distance) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            distance: distance,\r\n            previous: currentNode,\r\n          };\r\n          const objIndex: number = priorityQueue.findIndex((obj) => obj.id === updatedNeighbour.id);\r\n          priorityQueue[objIndex] = updatedNeighbour;\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        } else if (algoNodes[neighbours[i].row][neighbours[i].column].distance === null) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            distance: distance,\r\n            previous: currentNode,\r\n          };\r\n          priorityQueue.push(updatedNeighbour);\r\n          algoNodes[neighbours[i].row][neighbours[i].column] = updatedNeighbour;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentNode.type !== \"start\") {\r\n      nodesOrder.push(currentNode);\r\n      algoNodes[currentNode.row][currentNode.column] = {\r\n        ...currentNode,\r\n        type: \"visited\",\r\n      };\r\n    }\r\n  }\r\n  const endTime: number = performance.now();\r\n  const timeTaken: number = endTime - startTime;\r\n  return {\r\n    nodesOrder,\r\n    pathOrder,\r\n    statistics: {\r\n      distance: endNodeDistance,\r\n      numberOfVisited: nodesOrder.length,\r\n      timeTaken: timeTaken,\r\n    },\r\n  };\r\n}\r\n","import { Node, find, findNeighbours, findNodesOrderToStart } from \"./pathfindingUtils\";\r\n\r\nexport function depth(nodes: Node[][]) {\r\n  const algoNodes: Node[][] = JSON.parse(JSON.stringify(nodes));\r\n  const startingNode: Node | undefined = find(\"start\", algoNodes);\r\n  const endingNode: Node | undefined = find(\"end\", algoNodes);\r\n\r\n  if (startingNode === undefined || endingNode === undefined) {\r\n    return {\r\n      nodesOrder: undefined,\r\n      pathOrder: undefined,\r\n      statistics: {\r\n        distance: 0,\r\n        numberOfVisited: 0,\r\n        timeTaken: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  const priorityQueue: Node[] = [];\r\n  const nodesOrder: Node[] = [];\r\n  let pathOrder: Node[] | undefined = [];\r\n  let endNodeDistance: number = 0;\r\n  const startTime: number = performance.now();\r\n\r\n  priorityQueue.push(startingNode);\r\n\r\n  while (priorityQueue.length > 0) {\r\n    const currentNode: Node | undefined = priorityQueue.pop();\r\n    if (currentNode === undefined) {\r\n      break;\r\n    }\r\n\r\n    if (currentNode.type === \"end\" && currentNode.previous) {\r\n      pathOrder = findNodesOrderToStart(currentNode.previous);\r\n      if (pathOrder) {\r\n        endNodeDistance = pathOrder.length;\r\n      }\r\n      break;\r\n    }\r\n\r\n    const neighbours: Node[] = findNeighbours(currentNode, algoNodes);\r\n    if (neighbours.length !== 0) {\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        const objIndex: number = priorityQueue.findIndex((obj) => obj.id === neighbours[i].id);\r\n        if (objIndex === -1) {\r\n          const updatedNeighbour: Node = {\r\n            ...neighbours[i],\r\n            previous: currentNode,\r\n          };\r\n          priorityQueue.push(updatedNeighbour);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentNode.type !== \"start\") {\r\n      nodesOrder.push(currentNode);\r\n      algoNodes[currentNode.row][currentNode.column] = {\r\n        ...currentNode,\r\n        type: \"visited\",\r\n      };\r\n    }\r\n  }\r\n\r\n  const endTime: number = performance.now();\r\n  const timeTaken: number = endTime - startTime;\r\n  return {\r\n    nodesOrder,\r\n    pathOrder,\r\n    statistics: {\r\n      distance: endNodeDistance,\r\n      numberOfVisited: nodesOrder.length,\r\n      timeTaken: timeTaken,\r\n    },\r\n  };\r\n}\r\n","interface Node {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: Node[];\r\n  distance: number;\r\n}\r\n\r\ninterface WrapperNode {\r\n  node: Node;\r\n  type: string;\r\n}\r\n\r\nexport const recursive = (nodes: Node[]) => {\r\n  if (!isValid(nodes)) {\r\n    return [];\r\n  }\r\n  const generatedWallNodes: WrapperNode[] = [];\r\n  const splittedNodes1: Node[] = [];\r\n  const splittedNodes2: Node[] = [];\r\n\r\n  const isHorizontal: boolean =\r\n    nodes[nodes.length - 1].row - nodes[0].row > nodes[nodes.length - 1].column - nodes[0].column ? true : false;\r\n\r\n  const divisionRow: number = findEvenFromRange(nodes[0].row, nodes[nodes.length - 1].row);\r\n  const divisionColumn: number = findEvenFromRange(nodes[0].column, nodes[nodes.length - 1].column);\r\n  let divide: number = isHorizontal ? divisionRow : divisionColumn;\r\n\r\n  if (nodes[nodes.length - 1].row - nodes[0].row === 0) {\r\n    divide = divisionColumn;\r\n  } else if (nodes[nodes.length - 1].column - nodes[0].column === 0) {\r\n    divide = divisionRow;\r\n  }\r\n\r\n  const wallNodes: WrapperNode[] = [];\r\n  const passage: number = findPassage(isHorizontal, nodes);\r\n\r\n  nodes.forEach((node: Node) => {\r\n    if (node.row === 0 || node.row === 20 || node.column === 0 || node.column === 50) {\r\n      return;\r\n    }\r\n\r\n    if (isHorizontal) {\r\n      if (node.row === divide) {\r\n        wallNodes.push(markAsWall(node));\r\n      } else if (node.row < divide) {\r\n        splittedNodes1.push(node);\r\n      } else {\r\n        splittedNodes2.push(node);\r\n      }\r\n    } else {\r\n      if (node.column === divide) {\r\n        wallNodes.push(markAsWall(node));\r\n      } else if (node.column < divide) {\r\n        splittedNodes1.push(node);\r\n      } else {\r\n        splittedNodes2.push(node);\r\n      }\r\n    }\r\n  });\r\n\r\n  const wallNodesWithPassage = wallNodes.filter((item) => {\r\n    return isHorizontal ? item.node.column !== passage : item.node.row !== passage;\r\n  });\r\n\r\n  generatedWallNodes.push(...wallNodesWithPassage);\r\n  generatedWallNodes.push(...recursive(splittedNodes1));\r\n  generatedWallNodes.push(...recursive(splittedNodes2));\r\n\r\n  return generatedWallNodes;\r\n};\r\n\r\nfunction findPassage(horizontal: boolean, nodes: Node[]) {\r\n  if (horizontal) {\r\n    return findOddFromRange(nodes[0].column, nodes[nodes.length - 1].column);\r\n  } else return findOddFromRange(nodes[0].row, nodes[nodes.length - 1].row);\r\n}\r\nfunction isValid(nodes: Node[]) {\r\n  if (nodes.length < 3) {\r\n    return false;\r\n  }\r\n  if (nodes[nodes.length - 1].row - nodes[0].row === 0 || nodes[nodes.length - 1].column - nodes[0].column === 0) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\nconst markAsWall = (node: Node) => {\r\n  return { node: node, type: \"wall\" };\r\n};\r\n\r\nfunction findEvenFromRange(start: number, end: number) {\r\n  const rangeArray: number[] = Array(end - start + 1)\r\n    .fill(0)\r\n    .map((_, idx) => start + idx);\r\n  const filteredArray = rangeArray.filter((number) => number % 2 === 0);\r\n  return filteredArray[Math.floor(Math.random() * filteredArray.length)];\r\n}\r\n\r\nfunction findOddFromRange(start: number, end: number) {\r\n  const rangeArray: number[] = Array(end - start + 1)\r\n    .fill(0)\r\n    .map((_, idx) => start + idx);\r\n  const filteredArray = rangeArray.filter((number) => number % 2 !== 0);\r\n  return filteredArray[Math.floor(Math.random() * filteredArray.length)];\r\n}\r\n","import Node from \"./Nodes/Node\";\r\nimport styles from \"./MainPage.module.css\";\r\nimport nodeStyles from \"./Nodes/Node.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useControls } from \"../Contex/ControlsContext\";\r\nimport { useAlgorithm } from \"../Contex/AlgorithmsContext\";\r\nimport { randomDepth } from \"../../algorithms/mazes/randomDepth\";\r\nimport { randomMaze } from \"../../algorithms/mazes/random\";\r\nimport { dijkstra } from \"../../algorithms/pathfinding/dijkstra\";\r\nimport { astar } from \"../../algorithms/pathfinding/astar\";\r\nimport { breadth } from \"../../algorithms/pathfinding/breadth\";\r\nimport { best } from \"../../algorithms/pathfinding/best\";\r\nimport { depth } from \"../../algorithms/pathfinding/depth\";\r\nimport { recursive } from \"../../algorithms/mazes/recursive\";\r\nimport { Node as NodeInterface } from \"../../algorithms/pathfinding/pathfindingUtils\";\r\nimport { WrapperNode } from \"../../algorithms/mazes/randomDepth\";\r\n\r\n// Node types are: clear, wall, start, end, visited\r\ninterface algorithmStack {\r\n  nodesOrder: NodeInterface[] | undefined;\r\n  pathOrder: NodeInterface[] | undefined;\r\n  statistics: {\r\n    distance: number;\r\n    numberOfVisited: number;\r\n    timeTaken: number;\r\n  };\r\n}\r\n\r\nexport class SingleNode implements NodeInterface {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: NodeInterface[];\r\n  distance: number;\r\n  constructor(id: number, row: number, column: number) {\r\n    this.id = id;\r\n    this.row = row;\r\n    this.column = column;\r\n    this.type = \"clear\";\r\n    this.prevType = \"clear\";\r\n    this.neighbours = [];\r\n    this.distance = Infinity;\r\n  }\r\n}\r\n\r\nconst wallsAround = (nodes: SingleNode[][]) => {\r\n  const helpingStack = [];\r\n  for (let row = 0; row < nodes.length; row++) {\r\n    for (let column = 0; column < nodes[0].length; column++) {\r\n      if (row === 0 || row === nodes.length - 1 || column === 0 || column === nodes[0].length - 1) {\r\n        helpingStack.push({ node: nodes[row][column], type: \"wall\" });\r\n      }\r\n    }\r\n  }\r\n  return helpingStack;\r\n};\r\n\r\nconst allWalls = (nodes: SingleNode[][]) => {\r\n  for (let row = 0; row < nodes.length; row++) {\r\n    for (let column = 0; column < nodes[0].length; column++) {\r\n      const currentNode = nodes[row][column];\r\n      if (!(currentNode.type === \"start\" || currentNode.type === \"end\")) {\r\n        document.getElementById(`node-${currentNode.row}-${currentNode.column}`)!.className = `${nodeStyles.wall}`;\r\n        nodes[row][column] = { ...nodes[row][column], type: \"wall\" };\r\n      }\r\n    }\r\n  }\r\n\r\n  return nodes;\r\n};\r\n\r\nconst populateNodes = () => {\r\n  let nodes: SingleNode[][] = [];\r\n  for (let row = 0; row < 21; row++) {\r\n    let currentRow: SingleNode[] = [];\r\n    for (let column = 0; column < 51; column++) {\r\n      const node: SingleNode = new SingleNode(row * 51 + column, row, column);\r\n      if (column === 11 && row === 11) node.type = \"start\";\r\n      if (column === 39 && row === 11) node.type = \"end\";\r\n      currentRow.push(node);\r\n    }\r\n    nodes.push(currentRow);\r\n  }\r\n  return nodes;\r\n};\r\n\r\nconst clearWalls = (nodes: SingleNode[][]) => {\r\n  for (let row = 0; row < nodes.length; row++) {\r\n    for (let column = 0; column < nodes[0].length; column++) {\r\n      if (nodes[row][column].type === \"wall\") {\r\n        nodes[row][column].type = \"clear\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return nodes;\r\n};\r\n\r\nlet nodes: SingleNode[][] = populateNodes();\r\n\r\nconst clearPaths = () => {\r\n  for (let row = 0; row < nodes.length; row++) {\r\n    for (let column = 0; column < nodes[0].length; column++) {\r\n      const currentNode: SingleNode = nodes[row][column];\r\n      if (currentNode.type === \"visited\" || currentNode.type === \"path\") {\r\n        nodes[row][column] = {\r\n          ...currentNode,\r\n          type: \"clear\",\r\n          distance: Infinity,\r\n        };\r\n      }\r\n      if (currentNode.type === \"end\") {\r\n        nodes[row][column] = {\r\n          ...currentNode,\r\n          type: \"end\",\r\n          distance: Infinity,\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst MainPage = () => {\r\n  // const [nodes, setNodes] = useState(populateNodes());\r\n  const [previousNode, setPreviousNode] = useState({ row: 0, column: 0 });\r\n  const [isInDrawingMode, setIsInDrawingMode] = useState(false);\r\n  const [isInBlockedState, setIsInBlockedState] = useState(false);\r\n  const [drawingType, setDrawingType] = useState(\"\");\r\n  const { mainPageCommand, setMainPageCommand, executeAlgo } = useControls();\r\n  const {\r\n    currentMazeAlgorithm,\r\n    setCurrentMazeAlgorithm,\r\n    currentAnimationStyle,\r\n    currentAlgorithm,\r\n    setCurrentAlgorithm,\r\n    mazeAnimationSpeed,\r\n    setAlgoStats,\r\n    algoAnimationSpeed,\r\n    setCompareAlgoData,\r\n  } = useAlgorithm();\r\n\r\n  useEffect(() => {\r\n    if (mainPageCommand === \"clear\") {\r\n      nodes = clearWalls(nodes);\r\n      executePathFinding(0);\r\n      setMainPageCommand(\"none\");\r\n    } else if (mainPageCommand === \"reset\") {\r\n      nodes = populateNodes();\r\n      setAlgoStats({ distance: 0, numberOfVisited: 0, timeTaken: 0 });\r\n      setCurrentAlgorithm(\"None\");\r\n      setMainPageCommand(\"none\");\r\n    } else if (mainPageCommand === \"\") {\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [mainPageCommand, setAlgoStats, setCurrentAlgorithm]);\r\n\r\n  useEffect(() => {\r\n    clearPaths();\r\n    switch (executeAlgo) {\r\n      case \"Dijkstra's algorithm\":\r\n        setCompareAlgoData({ name: executeAlgo, data: dijkstra(nodes) });\r\n        break;\r\n      case \"A* search\":\r\n        setCompareAlgoData({ name: executeAlgo, data: astar(nodes) });\r\n        break;\r\n      case \"Breadth first search\":\r\n        setCompareAlgoData({ name: executeAlgo, data: breadth(nodes) });\r\n        break;\r\n      case \"Best first search\":\r\n        setCompareAlgoData({ name: executeAlgo, data: best(nodes) });\r\n        break;\r\n      case \"Depth first search\":\r\n        setCompareAlgoData({ name: executeAlgo, data: depth(nodes) });\r\n        break;\r\n      default:\r\n    }\r\n  }, [executeAlgo, setCompareAlgoData]);\r\n\r\n  //Generating maze\r\n  useEffect(() => {\r\n    if (isValidMazeAlgorithm(currentMazeAlgorithm)) {\r\n      setCurrentMazeAlgorithm(\"Default\");\r\n      setCurrentAlgorithm(\"None\");\r\n      generateMaze(currentMazeAlgorithm);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentMazeAlgorithm]);\r\n\r\n  //Executing pathfinding algorithms\r\n  useEffect(() => {\r\n    executePathFinding(algoAnimationSpeed);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentAlgorithm]);\r\n\r\n  const updateNodes = (col: number, row: number, type: string, prevType = type) => {\r\n    const node: SingleNode = nodes[row][col];\r\n    const newNode: SingleNode = { ...node, type: type, prevType: prevType };\r\n    nodes[row][col] = newNode;\r\n    setCompareAlgoData(\"clear\");\r\n    document.getElementById(`node-${row}-${col}`)!.className = type;\r\n  };\r\n\r\n  const moveStartEnd = (row: number, col: number, prevRow: number, prevCol: number, type: string) => {\r\n    const newNode: SingleNode = nodes[row][col];\r\n    const prevNode: SingleNode = nodes[prevRow][prevCol];\r\n    const newUpdatedNode = { ...newNode, type: type, prevType: newNode.type };\r\n    if (prevNode.type === \"start\" || prevNode.type === \"end\") {\r\n      const prevUpdatedNode: SingleNode = { ...prevNode, type: prevNode.prevType, prevType: \"clear\" };\r\n      nodes[prevRow][prevCol] = prevUpdatedNode;\r\n    } else {\r\n      nodes[prevRow][prevCol] = { ...prevNode, type: prevNode.prevType };\r\n    }\r\n    nodes[row][col] = newUpdatedNode;\r\n    executePathFinding(0);\r\n    setCompareAlgoData(\"clear\");\r\n  };\r\n\r\n  const animateAlgo = (stack: algorithmStack, time: number) => {\r\n    setIsInBlockedState(true);\r\n    const { nodesOrder, pathOrder } = stack;\r\n\r\n    if (nodesOrder === undefined) {\r\n      return;\r\n    }\r\n    if (time === 0) {\r\n      nodesOrder.forEach((currNode: SingleNode, indx: number) => {\r\n        document.getElementById(`node-${currNode.row}-${currNode.column}`)!.className = `${nodeStyles.visited}`;\r\n\r\n        nodes[currNode.row][currNode.column] = {\r\n          ...currNode,\r\n          type: \"visited\",\r\n        };\r\n        if (nodesOrder.length === indx + 1) {\r\n          if (pathOrder === undefined) {\r\n            return;\r\n          }\r\n          if (pathOrder.length === 0) {\r\n            setIsInBlockedState(false);\r\n          }\r\n          animatePath(pathOrder, time);\r\n        }\r\n      });\r\n    } else\r\n      nodesOrder.forEach((currNode, indx) => {\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${currNode.row}-${currNode.column}`)!.className = `${nodeStyles.visited}`;\r\n\r\n          nodes[currNode.row][currNode.column] = {\r\n            ...currNode,\r\n            type: \"visited\",\r\n          };\r\n          if (nodesOrder.length === indx + 1) {\r\n            if (pathOrder === undefined) {\r\n              return;\r\n            }\r\n            if (pathOrder.length === 0) {\r\n              setIsInBlockedState(false);\r\n            } else animatePath(pathOrder, time);\r\n          }\r\n        }, time * indx);\r\n      });\r\n  };\r\n\r\n  const animatePath = (stack: NodeInterface[], time: number) => {\r\n    if (time === 0) {\r\n      stack.forEach((currNode, indx) => {\r\n        document.getElementById(`node-${currNode.row}-${currNode.column}`)!.className = `${nodeStyles.path}`;\r\n        nodes[currNode.row][currNode.column].type = \"path\";\r\n        if (stack.length === indx + 1) {\r\n          setIsInBlockedState(false);\r\n        }\r\n      });\r\n    } else\r\n      stack.forEach((currNode, indx) => {\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${currNode.row}-${currNode.column}`)!.className = `${nodeStyles.path}`;\r\n          nodes[currNode.row][currNode.column].type = \"path\";\r\n          if (stack.length === indx + 1) {\r\n            setIsInBlockedState(false);\r\n          }\r\n        }, 20 * indx);\r\n      });\r\n  };\r\n\r\n  const generateMaze = (currentMazeAlgorithm: string) => {\r\n    let stack: WrapperNode[] = getStackForCurrentAlgorithm(currentMazeAlgorithm);\r\n    clearPaths();\r\n\r\n    if (currentAnimationStyle === \"Classic\") {\r\n      classicMazeAnimation(stack);\r\n    } else {\r\n      eduMazeAnimation(stack);\r\n    }\r\n  };\r\n\r\n  const executePathFinding = (time: number) => {\r\n    let currentAlgoNodes: algorithmStack | undefined = undefined;\r\n    clearPaths();\r\n    switch (currentAlgorithm) {\r\n      case \"Dijkstra's algorithm\":\r\n        currentAlgoNodes = dijkstra(nodes);\r\n        break;\r\n      case \"A* search\":\r\n        currentAlgoNodes = astar(nodes);\r\n        break;\r\n      case \"Breadth first search\":\r\n        currentAlgoNodes = breadth(nodes);\r\n        break;\r\n      case \"Best first search\":\r\n        currentAlgoNodes = best(nodes);\r\n        break;\r\n      case \"Depth first search\":\r\n        currentAlgoNodes = depth(nodes);\r\n        break;\r\n      default:\r\n    }\r\n    if (currentAlgoNodes === undefined || currentAlgoNodes.nodesOrder === undefined) {\r\n      return;\r\n    }\r\n\r\n    setAlgoStats(currentAlgoNodes.statistics);\r\n    animateAlgo(currentAlgoNodes, time);\r\n  };\r\n\r\n  const eduMazeAnimation = (stack: WrapperNode[]) => {\r\n    setIsInBlockedState(true);\r\n    nodes = prepareTheBoard(stack);\r\n    animateGrid(stack);\r\n  };\r\n\r\n  const classicMazeAnimation = (stack: WrapperNode[]) => {\r\n    setIsInBlockedState(true);\r\n    clearWalls(nodes);\r\n    const wallNodes: WrapperNode[] = getWallNodesFromStack(stack);\r\n    animateGrid(wallNodes);\r\n  };\r\n\r\n  function animateGrid(stack: WrapperNode[]) {\r\n    stack.forEach((currNode, indx) => {\r\n      const { node, type: stackNodeType } = currNode;\r\n      const currentNodeType = nodes[node.row][node.column].type;\r\n\r\n      setTimeout(() => {\r\n        if (stack.length === indx + 1) {\r\n          setIsInBlockedState(false);\r\n        }\r\n        if (currentNodeType === \"start\" || currentNodeType === \"end\") {\r\n          return;\r\n        }\r\n        if (stackNodeType === \"clear\") {\r\n          document.getElementById(`node-${node.row}-${node.column}`)!.className = `${nodeStyles.clear}`;\r\n          nodes[node.row][node.column].type = \"clear\";\r\n        } else if (stackNodeType === \"wall\") {\r\n          document.getElementById(`node-${node.row}-${node.column}`)!.className = `${nodeStyles.wall}`;\r\n          nodes[node.row][node.column].type = \"wall\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.column}`)!.className = `${nodeStyles.visited}`;\r\n          nodes[node.row][node.column].type = \"visited\";\r\n        }\r\n      }, indx * mazeAnimationSpeed);\r\n    });\r\n  }\r\n  return (\r\n    <div\r\n      onMouseUp={() => setIsInDrawingMode(false)}\r\n      onMouseLeave={() => setIsInDrawingMode(false)}\r\n      className={styles.nodesWraper}\r\n    >\r\n      {nodes.map((row, rowIdx) => {\r\n        return (\r\n          <div className={styles.rowWraper} key={rowIdx}>\r\n            {row.map((node, nodeidx) => {\r\n              return (\r\n                <Node\r\n                  key={node.id}\r\n                  row={node.row}\r\n                  column={node.column}\r\n                  isInDrawingMode={isInDrawingMode}\r\n                  setIsInDrawingMode={setIsInDrawingMode}\r\n                  drawingType={drawingType}\r\n                  setDrawingType={setDrawingType}\r\n                  node={node}\r\n                  setPreviousNode={setPreviousNode}\r\n                  previousNode={previousNode}\r\n                  isInBlockedState={isInBlockedState}\r\n                  updateNodes={updateNodes}\r\n                  onMoveStartEnd={moveStartEnd}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction isValidMazeAlgorithm(mazeAlgorithmName: String) {\r\n  if (\r\n    mazeAlgorithmName === \"Recursive backtracking\" ||\r\n    mazeAlgorithmName === \"Random maze\" ||\r\n    mazeAlgorithmName === \"Recursive division\"\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getStackForCurrentAlgorithm(mazeAlgorithmName: String) {\r\n  let stack: WrapperNode[] = [];\r\n  if (mazeAlgorithmName === \"Recursive backtracking\") {\r\n    stack = randomDepth(nodes);\r\n  }\r\n\r\n  if (mazeAlgorithmName === \"Random maze\") {\r\n    stack = randomMaze(nodes);\r\n  }\r\n\r\n  if (mazeAlgorithmName === \"Recursive division\") {\r\n    stack = wallsAround(nodes);\r\n    stack.push(...recursive(nodes.flat()));\r\n  }\r\n\r\n  return stack;\r\n}\r\n\r\nfunction prepareTheBoard(stack: WrapperNode[]) {\r\n  let type: string = stack[0].type;\r\n  if (type === \"clear\") {\r\n    return allWalls(nodes);\r\n  }\r\n\r\n  return clearWalls(nodes);\r\n}\r\n\r\nfunction getWallNodesFromStack(stack: WrapperNode[]) {\r\n  const type: string = stack[0].type;\r\n  const onlyWalls: SingleNode[] = nodes.flat().filter((arrNode) => {\r\n    for (let i = 0; i < stack.length; i++) {\r\n      const { node } = stack[i];\r\n      if (node.id === arrNode.id && type === \"clear\") return false;\r\n      if (node.id === arrNode.id && type === \"wall\") return true;\r\n    }\r\n    if (type === \"clear\") {\r\n      return true;\r\n    } else return false;\r\n  });\r\n\r\n  return onlyWalls.map((node) => {\r\n    return { node: node, type: \"wall\" };\r\n  });\r\n}\r\n\r\nexport default MainPage;\r\n","interface Node {\r\n  id: number;\r\n  row: number;\r\n  column: number;\r\n  type: string;\r\n  prevType: string;\r\n  neighbours: object[];\r\n  distance: number;\r\n}\r\n\r\nexport function randomMaze(nodes: Node[][]) {\r\n  const generatedClearNodes = JSON.parse(JSON.stringify(nodes))\r\n    .flat()\r\n    .filter((node: Node) => {\r\n      if (node.row === 0 || node.row === nodes.length - 1) return false;\r\n      if (node.column === 0 || node.column === nodes[0].length - 1) return false;\r\n      return Math.random() < 0.75;\r\n    })\r\n    .map((node: Node) => {\r\n      return { node: node, type: \"clear\" };\r\n    });\r\n\r\n  return generatedClearNodes;\r\n}\r\n","import styles from \"./CompareAlgo.module.css\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useControls } from \"../../Contex/ControlsContext\";\r\nimport { useAlgorithm } from \"../../Contex/AlgorithmsContext\";\r\nimport DropdownMenu from \"../../Header/HeaderComponents/DropdownMenu/DropdownMenu\";\r\nimport Picker from \"../../Header/HeaderComponents/Picker/Picker\";\r\nimport DropdownItem from \"../../Header/HeaderComponents/DropdownItem/DropdownItem\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst pathfindingAlgosList = [\r\n  \"A* search\",\r\n  \"Dijkstra's algorithm\",\r\n  \"Depth first search\",\r\n  \"Breadth first search\",\r\n  \"Best first search\",\r\n];\r\n\r\ninterface Props {\r\n  isCompareOpen: boolean;\r\n}\r\ninterface Algorithm {\r\n  name: string;\r\n  data: any;\r\n}\r\n\r\nconst CompareAlgo: React.FC<Props> = ({ isCompareOpen }) => {\r\n  const [algosToCompare, setAlgosToCompare] = useState<Array<Algorithm>>([]);\r\n  const { setExecuteAlgo } = useControls();\r\n  const { compareAlgoData, setCurrentAlgorithm } = useAlgorithm();\r\n  const { t } = useTranslation();\r\n  useEffect(() => {\r\n    if (compareAlgoData === \"clear\") {\r\n      setAlgosToCompare([]);\r\n      setExecuteAlgo(\"None\");\r\n    } else if (compareAlgoData) {\r\n      setAlgosToCompare((prev) => [...prev, { name: compareAlgoData.name, data: compareAlgoData.data }]);\r\n    }\r\n  }, [compareAlgoData, setExecuteAlgo]);\r\n  const handleClearAlgos = () => {\r\n    setAlgosToCompare([]);\r\n  };\r\n  const handleAddAlgo = (name: string) => {\r\n    setExecuteAlgo(name);\r\n  };\r\n\r\n  const handleShowAlgo = (name: string) => {\r\n    setCurrentAlgorithm(name);\r\n  };\r\n\r\n  const isAlgorithmAvailable = (name: string) => {\r\n    for (let i = 0; i < algosToCompare.length; i++) {\r\n      if (algosToCompare[i].name === name) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  return (\r\n    <div className={`${styles.compareAlgoWrapper} ${isCompareOpen ? styles.compareAlgoWrapperOpened : \"\"}`}>\r\n      <div className={styles.list}>\r\n        <div className={styles.row}>\r\n          <p>{t(\"compare_algo\")}</p>\r\n          <p>{t(\"compare_time\")}</p>\r\n          <p>{t(\"compare_length\")}</p>\r\n          <p>{t(\"compare_operations\")}</p>\r\n        </div>\r\n        <hr style={{ width: \"450px\", color: \"#353535\" }} />\r\n        {algosToCompare.map((item) => {\r\n          const { name, data } = item;\r\n          return (\r\n            <>\r\n              <div className={styles.row} key={name}>\r\n                <p key={name}>{name}</p>\r\n                <p>{round(data.statistics.timeTaken)} ms</p>\r\n                <p>{data.statistics.distance}</p>\r\n                <p>{data.statistics.numberOfVisited}</p>\r\n                <Button onClick={() => handleShowAlgo(name)} text={t(\"compare_show\")} />\r\n              </div>\r\n              <hr style={{ width: \"450px\", color: \"#353535\" }} />\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <footer className={styles.buttons}>\r\n        <Picker name={t(\"compare_add_algorithm\")}>\r\n          <DropdownMenu>\r\n            {pathfindingAlgosList\r\n              .filter((algorithm) => {\r\n                return isAlgorithmAvailable(algorithm);\r\n              })\r\n              .map((item, index, arr) => {\r\n                //TODO: key fix\r\n                return <DropdownItem key={arr[index]} onClick={handleAddAlgo} name={item} />;\r\n              })}\r\n          </DropdownMenu>\r\n        </Picker>\r\n        <Button onClick={handleClearAlgos} text={\"X\"} />\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction round(num: number) {\r\n  let m = Number((Math.abs(num) * 100).toPrecision(15));\r\n  return (Math.round(m) / 100) * Math.sign(num);\r\n}\r\n\r\nexport default CompareAlgo;\r\n","import { useTranslation } from \"react-i18next\";\r\nimport styles from \"./Statistics.module.css\";\r\n\r\ninterface Props {\r\n  currentAlgorithm: string;\r\n  algoStats: {\r\n    distance: number;\r\n    numberOfVisited: number;\r\n    timeTaken: number;\r\n  };\r\n  isStatOpen: boolean;\r\n}\r\nconst Statistics: React.FC<Props> = (props) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <>\r\n      <div className={`${styles.statisticsDialog} ${props.isStatOpen ? styles.statisticsDialogOpened : \"\"}`}>\r\n        <p>{props.currentAlgorithm}</p>\r\n        <div className={styles.statWrapper}>\r\n          <h4>{t(\"stat_time_elapsed\")}:</h4>\r\n          <p>{round(props.algoStats.timeTaken)}ms</p>\r\n          <h4>{t(\"stat_length_of_road\")}:</h4>\r\n          <p>{props.algoStats.distance}</p>\r\n          <h4>{t(\"stat_number_of_operations\")}:</h4>\r\n          <p>{props.algoStats.numberOfVisited}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction round(num: number) {\r\n  let m = Number((Math.abs(num) * 100).toPrecision(15));\r\n  return (Math.round(m) / 100) * Math.sign(num);\r\n}\r\n\r\nexport default Statistics;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAlgorithm } from \"../Contex/AlgorithmsContext\";\r\nimport CompareAlgo from \"../SideComponents/CompareAlgo/CompareAlgo\";\r\nimport styles from \"./Sidebar.module.css\";\r\nimport Statistics from \"../SideComponents/Statistics/Statistics\";\r\n\r\nconst Sidebar = () => {\r\n  const [isStatOpen, setIsStatOpen] = useState(false);\r\n  const [isCompareOpen, setIsCompareOpen] = useState(false);\r\n  const { algoStats, currentAlgorithm } = useAlgorithm();\r\n\r\n  useEffect(() => {\r\n    if (algoStats.numberOfVisited > 0) {\r\n      setIsStatOpen(true);\r\n    }\r\n  }, [algoStats]);\r\n\r\n  const handleOnClickStatistics = () => {\r\n    if (algoStats.numberOfVisited !== 0) {\r\n      setIsStatOpen((previous) => !previous);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleOnClickStatistics} className={`${styles.stats} ${styles.sidePanel}`}>\r\n        <p>Statistics</p>\r\n        <div className={isStatOpen && algoStats.numberOfVisited !== 0 ? styles.triangleOpened : styles.triangle}></div>\r\n      </div>\r\n      <Statistics currentAlgorithm={currentAlgorithm} algoStats={algoStats} isStatOpen={isStatOpen} />\r\n      <div\r\n        onClick={() => setIsCompareOpen((previous) => !previous)}\r\n        className={`${styles.compare} ${styles.sidePanel}`}\r\n      >\r\n        <p>Compare algo</p>\r\n        <div className={isCompareOpen ? styles.triangleOpened : styles.triangle}></div>\r\n      </div>\r\n      <CompareAlgo isCompareOpen={isCompareOpen} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import \"./App.css\";\r\nimport { AlgorithmsContext } from \"./Components/Contex/AlgorithmsContext\";\r\nimport { ControlsContext } from \"./Components/Contex/ControlsContext\";\r\nimport Footer from \"./Components/Footer/Footer\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport MainPage from \"./Components/MainPage/MainPage\";\r\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ControlsContext>\r\n      <AlgorithmsContext>\r\n        <div className=\"App\">\r\n          <Header />\r\n          <MainPage />\r\n          <Footer />\r\n          <Sidebar />\r\n        </div>\r\n      </AlgorithmsContext>\r\n    </ControlsContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport * as en from \"./assets/locales/en.json\";\r\nimport * as pl from \"./assets/locales/pl.json\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\ni18n.use(initReactI18next).init({\r\n  resources: {\r\n    en: { translation: en.translation },\r\n    pl: {\r\n      translation: pl.translation,\r\n    },\r\n  },\r\n  lng: \"en\",\r\n  fallbackLng: \"en\",\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}